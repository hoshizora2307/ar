document.addEventListener('DOMContentLoaded', () => {
    const video = document.getElementById('webcam-video');
    const canvas = document.getElementById('ar-canvas');
    const ctx = canvas.getContext('2d');
    const infoBox = document.getElementById('info-box');
    const starNameEl = document.getElementById('star-name');
    const starInfoEl = document.getElementById('star-info');
    const companyConstellationEl = document.getElementById('company-constellation');

    // AR情報を保持するデータ
    const celestialObjects = [
        { name: 'ベガ (こと座)', x: 0.5, y: 0.3, info: '七夕の織姫星' },
        { name: 'アルタイル (わし座)', x: 0.7, y: 0.6, info: '七夕の彦星' },
        { name: 'デネブ (はくちょう座)', x: 0.2, y: 0.4, info: '夏の大三角の頂点' },
        { name: '北極星 (こぐま座)', x: 0.5, y: 0.1, info: '北の空に動かない星' },
        { name: '火星 (Planet Mars)', x: 0.8, y: 0.5, info: '赤い惑星' },
        { name: 'あなたの会社のサービス', x: 0.3, y: 0.8, info: '未来を創造する技術' },
        // ... 他の星や星座をここに追加
    ];

    // あなたの会社のサービスを象徴する星座
    const companyConstellation = 'ペガスス座';
    companyConstellationEl.textContent = companyConstellation;


    // カメラ映像の取得と表示
    async function startWebcam() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
            video.srcObject = stream;
            video.onloadedmetadata = () => {
                video.play();
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                drawAR();
            };
        } catch (err) {
            console.error('Webカメラのアクセスに失敗しました', err);
            alert('Webカメラにアクセスできませんでした。このアプリはWebカメラが必要です。');
        }
    }

    // AR描画ループ
    function drawAR() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // 恒星や星座を描画
        celestialObjects.forEach(obj => {
            const screenX = obj.x * canvas.width;
            const screenY = obj.y * canvas.height;

            // 会社の星座をハイライト
            if (obj.name.includes(companyConstellation)) {
                ctx.fillStyle = '#ffcc00'; // 会社のハイライトカラー
                ctx.font = 'bold 24px Roboto Mono';
                ctx.fillText(obj.name, screenX + 15, screenY);
                drawStar(screenX, screenY, 15, 5, 0.5, '#ffcc00');
            } else {
                ctx.fillStyle = var(--text-color);
                ctx.font = '18px Roboto Mono';
                ctx.fillText(obj.name, screenX + 10, screenY);
                drawStar(screenX, screenY, 10, 5, 0.5, var(--text-color));
            }
        });

        requestAnimationFrame(drawAR);
    }

    // 星を描画するヘルパー関数
    function drawStar(cx, cy, spikes, outerRadius, innerRadius, color) {
        let rot = Math.PI / 2 * 3;
        let x = cx;
        let y = cy;
        let step = Math.PI / spikes;

        ctx.strokeStyle = color;
        ctx.beginPath();
        ctx.moveTo(cx, cy - outerRadius);
        for (let i = 0; i < spikes; i++) {
            x = cx + Math.cos(rot) * outerRadius;
            y = cy + Math.sin(rot) * outerRadius;
            ctx.lineTo(x, y);
            rot += step;

            x = cx + Math.cos(rot) * innerRadius;
            y = cy + Math.sin(rot) * innerRadius;
            ctx.lineTo(x, y);
            rot += step;
        }
        ctx.lineTo(cx, cy - outerRadius);
        ctx.closePath();
        ctx.lineWidth = 2;
        ctx.stroke();
        ctx.fillStyle = color;
        ctx.fill();
    }


    startWebcam();
});
